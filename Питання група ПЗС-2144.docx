Питання Величка Дмитра
1.	Що таке TypeScript?  
TypeScript - це строго типізована і компілювана мова, чим, можливо, буде ближче до програмістів Java, C# та інших типових мов. Хоча на виході компілятор створює той самий JavaScript, який потім виконується браузером.
2.	Як оголошуються змінні та константи в TypeScript? 
Для визначення змінних можна використовувати ключове слово var :
	var z;  
Інший спосіб визначення змінної застосовує ключове слово let.
	let z;
3.	Які існують типи даних в TypeScript? 
У TypeScript є такі базові типи:
•	boolean : логічне значення true чи false
•	number : числове значення
•	string : рядки
•	Array : масиви
•	кортежі
•	Enum : перерахування
•	Any : довільний тип
•	Symbol
•	null і undefined : відповідають значенням null і undefined у javascript
•	Never : також представляє відсутність значення і використовується як тип функцій, що повертаються, які генерують або повертають помилку
4.	Як створюються функції? 
Визначення функції
TypeScript також визначає функцію за допомогою ключового слова function, але додає додаткові можливості по роботі з функціями. Зокрема, тепер ми можемо визначити тип параметрів, що передаються, і тип значення, що повертається.
Параметри функції
Функція може мати параметри, які вказуються після назви функції у дужках через кому.
Результат функції
Функція може повертати значення певного типу, який називається типом функції. Тип функції, що повертається, ставиться після списку параметрів через двокрапку:
5.	Що собою являють котежі, масиви, enum? 
Масиви визначаються за допомогою виразу [] та також є строго типізованими.
Альтернативний спосіб визначення масивів представляє застосування типу Array<>, де у фігурних дужках вказується тип елементів масиву.
Але фактично такі форми масивів, як number[]або string[]є скороченням відповідно до типів Array<number>абоArray<string>
Кортежі (Tuples), як і масиви, представляють набір елементів, котрим заздалегідь відомий тип. На відміну від масивів кортежі можуть зберігати значення різних типів. Для визначення кортежу застосовується синтаксис масиву:

	let user: [string, number];
Тип enum або перерахування дозволяє визначити набір саме ванних констант, які описують певні стани.
Для визначення переліку застосовується ключове слово enum 
6.	Що собою являє клас? 
TypeScript реалізує об'єктно-орієнтований підхід, у ньому є повноцінна підтримка класів. Клас представляє шаблон для створення об'єктів та інкапсулює функціональність, яку повинен мати об'єкт. Клас визначає стан та поведінку, якими володіє об'єкт.
7.	За допомогою чого виконують початкову ініціалізацію об'єкта? 
Крім звичайних методів класи мають спеціальні функції – конструктори, які визначаються за допомогою ключового слова constructor . Конструктори виконують початкову ініціалізацію об'єкта.
8.	Що таке успадкування? 
Одним із ключових моментів об'єктно-орієнтованої парадигми є успадкування. У TypeScript успадкування реалізується за допомогою ключового слова extends (як Java).
Клас Employee, який представляє працівника, є підкласом чи успадковується від класу Person. А клас Person називається батьківським чи базовим класом. При наслідуванні клас Employee переймає весь функціонал класу Person - всі його властивості та функції і може їх використовувати. І також можна визначити у підкласі нові властивості та методи, яких немає у класі Person.
9.	Для чого потрібні модифікатори доступу? 
Модифікатори доступу дозволяють приховати стан об'єкта від зовнішнього доступу та керувати доступом до цього стану. У TypeScript три модифікатори: public , protected і private.
10.	Що таке інтерфейс? Як його використовують? 
Інтерфейс визначає властивості та методи, які об'єкт має реалізувати. Іншими словами, інтерфейс – це визначення кастомного типу даних, але без реалізації. У цьому випадку інтерфейси TS схожі на інтерфейси в мовах Java і C#. Інтерфейси визначаються за допомогою ключового слова interface . 

